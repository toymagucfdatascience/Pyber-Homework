Financial Analysis: budget_data2
 ---------------------------
 Total Months:86 
 Total Revenue:$38382578
 Average Revenue change:$-2351.12
 Greatest Increase In Revenue: Feb-2012 ($1926159)
 Greatest Decrease In Revenue: Sep-2013 ($-2196167)


Pyank/output/budget_data_1
------------------------------
Total Months: 86
Total Revenue:$38382578 
Average Revenue Change:$-2315.12
Greatest Increase In Revenue: Feb-2012 ($1926159)
Greatest Decrease In Revenue: sep-2013 ($_2196167)


Pybank/Pyank_main.Py

import os
import csv

# Established the root path,data path and export output path 
root_path =os.path.join(os.getcwd(), ".")
data_path =os.path.join(root_path, "raw_data")
output_path =os.path.join(root_path, "output")

#iterate through the listdir results
filepaths =[]
    for file in os.listdir(data_path):
    if file.endswith(".csv"):
    filepaths.append(os.path.join(data_path, file))

    #using csv.DicReader()
    for file in filepaths:
      tot_revenue = 0
      month_count = 0
      revenue = 0
      rev_change = 0
      data_dic_list = []
      with open(file, newline="") as csvfile:
      csvreader = csv.DicReader(csvfile)
    for row in csvreader:
    #creating new revenue difference per Month dictionary to calculate greatest inc/dec 
    rev_diff = {"rev_diff": int("{Revenue}".format(""row)) -revenue}
    rev_change = rev_change + int("{Revenue}".format(**row)) - revenue
    revenue = int"{Revenue}".format(""row)) 
    tot_revenue += revenue
    month_count += revenue 
    month_count += 1
 data_dic_list.append({""row, ""rev_diff})
 #turn dictionary housing max and min rev_diff values as individual dicts outside of list.
 increase_dict = dict(max(data_dic_list, key=lambda x:x["rev_diff"]))
 decrease_dict = dict(min(data_dic_list, key=lambda x:x["rev_diff"]))
 # pull date and rev_diff values for the corresponding greatest inc/dec Months.
 increase_date = Increase_dict.get("Date")
increase_revdiff = increase_dict.get("rev_diff")
decrease_date = decrease_dict.get("Date")
decrease_revdiff = decrease_dict.get("rev_diff")
# Adjust rev_diff to discount first row.
first_row = data_dic_list[0]
first_row_revdiff = first_row.get("rev_diff")
rev_change = rev_change-first_row_revdiff
avg_change = int(rev_change/month_count - 1))


# Grab the filename from the original path.
# The_,gets rid of the path .The , _ gets rid of the .cvs.
_, filename = os.ppath.split(file)
filename, _ = filename.split(".cvs")
# print the analysis to the terminal.
print( 
    f"Financial Analysis - {filename}\n"
    f"--------------------------------\n"
    f"Total Months: {month_count}\n"
    f"Total Revenue: ${tot_revenue}\n"
    f"Average Revenue Change: $(avg_change)\n"
    f"Greatest Increase In Revenue: {increase_date} (${increase_revdiff})\n"
    f"Greatest Decrease In Revenue: {decrease_date} (${decrease_revdiff}\n"


    Export a text file with the results.
    text_path = os.path.join(output_path, filename + ".txt")
    with open (text_path,"w")

)

]

